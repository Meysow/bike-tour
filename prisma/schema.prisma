// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}


model User {
  id                  String             @id @default(cuid())
  name                String?
  surname             String?
  email               String             @unique
  emailVerified       DateTime?
  image               String?
  createdAt DateTime  @default(now())    @map("created_at")
  updatedAt DateTime  @updatedAt
  rentals             Rental[]
  participatingTours  Tour[]             @relation("TourParticipants")
  role                Role               @default(USER)
  accounts            Account[]
  sessions            Session[]

  @@map("users")
}

model Account {
  id                  String             @id @default(cuid())
  userId              String             @map("user_id")
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
 
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id                  String             @id @default(cuid())
  sessionToken        String             @unique @map("session_token")
  userId              String             @map("user_id")
  expires             DateTime
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@map("sessions")
}
 
model VerificationToken {
  identifier          String
  token               String             @unique
  expires             DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Bike {
  id                  Int      @id @default(autoincrement())
  name                String
  category            String // ex: "Deluxe 7", "Electric"
  size                String // ex: "20 inches", "24 inches"
  stock               Int
  price               Float
  rentals             Rental[]
}

model Accessory {
  id                  Int      @id @default(autoincrement())
  name                String
  stock               Int
  price               Float
  rentals             Rental[]
}

model Tour {
  id                  Int    @id @default(autoincrement())
  name                String
  description         String
  price               Float
  participants        User[] @relation("TourParticipants")
}

model Rental {
  id                  Int        @id @default(autoincrement())
  user                User       @relation(fields: [userId], references: [id])
  userId              String     
  bike                Bike       @relation(fields: [bikeId], references: [id])
  bikeId              Int
  accessory           Accessory? @relation(fields: [accessoryId], references: [id])
  accessoryId         Int?
  startDate           DateTime
  endDate             DateTime
  totalPrice          Float
}


