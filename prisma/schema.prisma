// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role               Role // Admin ou Client

  rentals            Rental[]
  participatingTours Tour[]   @relation("TourParticipants")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Bike {
  id       Int      @id @default(autoincrement())
  name     String
  category String // ex: "Deluxe 7", "Electric"
  size     String // ex: "20 inches", "24 inches"
  stock    Int
  price    Float
  rentals  Rental[]
}

model Accessory {
  id      Int      @id @default(autoincrement())
  name    String
  stock   Int
  price   Float
  rentals Rental[]
}

model Tour {
  id           Int    @id @default(autoincrement())
  name         String
  description  String
  price        Float
  participants User[] @relation("TourParticipants")
}

model Rental {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      String     
  bike        Bike       @relation(fields: [bikeId], references: [id])
  bikeId      Int
  accessory   Accessory? @relation(fields: [accessoryId], references: [id])
  accessoryId Int?
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
}

enum Role {
  ADMIN
  CLIENT
}
