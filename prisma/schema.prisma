generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum BikeType {
  KIDS_20
  KIDS_24
  DELUXE_7
  ELECTRIC_POWER_1
}

enum BikeSize {
  SMALL
  MEDIUM
  LARGE
}

enum AccessoryType {
  HELMET
  BASKET
  PHONE_HOLDER
  BABY_SEAT
  CHILD_SEAT
  PANNIER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Difficulty {
  EASY
  MODERATE
  DIFFICULT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bike {
  id          String        @id @default(cuid())
  name        String
  type        BikeType
  size        BikeSize
  price       Decimal       @db.Decimal(10, 2)
  quantity    Int
  description String        @db.Text
  imageUrl    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bookings    BikeBooking[]
}

model Accessory {
  id          String              @id @default(cuid())
  name        String
  type        AccessoryType
  price       Decimal            @db.Decimal(10, 2)
  quantity    Int
  description String            @db.Text
  imageUrl    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  bookings    BookingAccessory[]
}

model Tour {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  duration    Int       // in hours
  distance    Int       // in kilometers
  difficulty  Difficulty
  price       Decimal   @db.Decimal(10, 2)
  imageUrl    String
  maxPeople   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model Booking {
  id            String            @id @default(cuid())
  userId        String
  tourId        String?
  startDate     DateTime
  endDate       DateTime
  totalPrice    Decimal          @db.Decimal(10, 2)
  status        BookingStatus    @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  user          User             @relation(fields: [userId], references: [id])
  tour          Tour?            @relation(fields: [tourId], references: [id])
  bikes         BikeBooking[]
  accessories   BookingAccessory[]
}

model BikeBooking {
  id        String   @id @default(cuid())
  bikeId    String
  bookingId String
  quantity  Int
  
  bike      Bike     @relation(fields: [bikeId], references: [id])
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([bikeId, bookingId])
}

model BookingAccessory {
  id          String    @id @default(cuid())
  accessoryId String
  bookingId   String
  quantity    Int
  
  accessory   Accessory @relation(fields: [accessoryId], references: [id])
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([accessoryId, bookingId])
}